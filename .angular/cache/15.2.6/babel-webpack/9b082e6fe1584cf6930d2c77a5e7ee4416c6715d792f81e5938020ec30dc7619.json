{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../service/resetpass-svc/resetpass.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction ResetpassComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.error);\n  }\n}\nfunction ResetpassComponent_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.success);\n  }\n}\nexport class ResetpassComponent {\n  constructor(resetpassService, router, route) {\n    this.resetpassService = resetpassService;\n    this.router = router;\n    this.route = route;\n    this.token = '';\n    this.newPassword = '';\n    this.confirmPassword = '';\n    this.error = '';\n    this.success = '';\n  }\n  ngOnInit() {\n    this.route.queryParams.subscribe(params => {\n      this.token = params['token'];\n      console.log(\"Retrieved token:\", this.token); // This will help in debugging\n    });\n  }\n\n  onSubmit() {\n    this.error = ''; // Reset error message on new submission\n    if (!this.token) {\n      this.error = 'Token is missing or invalid.';\n      return;\n    }\n    if (this.newPassword !== this.confirmPassword) {\n      this.error = 'Passwords do not match.';\n      return;\n    }\n    if (this.newPassword.length < 9) {\n      this.error = 'Password must be at least 8 characters long.';\n      return;\n    }\n    this.resetpassService.resetPassword(this.token, this.newPassword).subscribe({\n      next: res => {\n        console.log(res);\n        this.success = 'Your password has been reset successfully.';\n        this.router.navigate(['/login']);\n      },\n      error: err => {\n        console.error('Reset error:', err);\n        this.error = 'Failed to reset password. Please try again.';\n      }\n    });\n  }\n}\nResetpassComponent.ɵfac = function ResetpassComponent_Factory(t) {\n  return new (t || ResetpassComponent)(i0.ɵɵdirectiveInject(i1.ResetpassService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nResetpassComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ResetpassComponent,\n  selectors: [[\"app-resetpass\"]],\n  decls: 16,\n  vars: 4,\n  consts: [[1, \"reset-password-form\"], [3, \"ngSubmit\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [\"class\", \"alert alert-success\", 4, \"ngIf\"], [1, \"form-group\"], [\"for\", \"newPassword\"], [\"type\", \"password\", \"id\", \"newPassword\", \"name\", \"newPassword\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"confirmPassword\"], [\"type\", \"password\", \"id\", \"confirmPassword\", \"name\", \"confirmPassword\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"alert\", \"alert-danger\"], [1, \"alert\", \"alert-success\"]],\n  template: function ResetpassComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h2\");\n      i0.ɵɵtext(2, \"Reset Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function ResetpassComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵtemplate(4, ResetpassComponent_div_4_Template, 2, 1, \"div\", 2);\n      i0.ɵɵtemplate(5, ResetpassComponent_div_5_Template, 2, 1, \"div\", 3);\n      i0.ɵɵelementStart(6, \"div\", 4)(7, \"label\", 5);\n      i0.ɵɵtext(8, \"New Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 6);\n      i0.ɵɵlistener(\"ngModelChange\", function ResetpassComponent_Template_input_ngModelChange_9_listener($event) {\n        return ctx.newPassword = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\", 4)(11, \"label\", 7);\n      i0.ɵɵtext(12, \"Confirm New Password:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 8);\n      i0.ɵɵlistener(\"ngModelChange\", function ResetpassComponent_Template_input_ngModelChange_13_listener($event) {\n        return ctx.confirmPassword = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"button\", 9);\n      i0.ɵɵtext(15, \"Reset Password\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.error);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.success);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.newPassword);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.confirmPassword);\n    }\n  },\n  dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.NgModel, i4.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAGMA,+BAA8C;IAAAA,YAAW;IAAAA,iBAAM;;;;IAAjBA,eAAW;IAAXA,kCAAW;;;;;IACzDA,+BAAiD;IAAAA,YAAa;IAAAA,iBAAM;;;;IAAnBA,eAAa;IAAbA,oCAAa;;;ACKpE,OAAM,MAAOC,kBAAkB;EAO7BC,YACUC,gBAAkC,EAClCC,MAAc,EACdC,KAAqB;IAFrB,qBAAgB,GAAhBF,gBAAgB;IAChB,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IATf,UAAK,GAAW,EAAE;IAClB,gBAAW,GAAW,EAAE;IACxB,oBAAe,GAAW,EAAE;IAC5B,UAAK,GAAW,EAAE;IAClB,YAAO,GAAW,EAAE;EAMjB;EAEHC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,WAAW,CAACC,SAAS,CAACC,MAAM,IAAG;MACxC,IAAI,CAACC,KAAK,GAAGD,MAAM,CAAC,OAAO,CAAC;MAC5BE,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAACF,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC,CAAC;EACJ;;EAEAG,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,EAAE,CAAC,CAAC;IAEjB,IAAI,CAAC,IAAI,CAACJ,KAAK,EAAE;MACf,IAAI,CAACI,KAAK,GAAG,8BAA8B;MAC3C;;IAGF,IAAI,IAAI,CAACC,WAAW,KAAK,IAAI,CAACC,eAAe,EAAE;MAC7C,IAAI,CAACF,KAAK,GAAG,yBAAyB;MACtC;;IAGF,IAAI,IAAI,CAACC,WAAW,CAACE,MAAM,GAAG,CAAC,EAAE;MAC/B,IAAI,CAACH,KAAK,GAAG,8CAA8C;MAC3D;;IAGF,IAAI,CAACX,gBAAgB,CAACe,aAAa,CAAC,IAAI,CAACR,KAAK,EAAE,IAAI,CAACK,WAAW,CAAC,CAACP,SAAS,CAAC;MAC1EW,IAAI,EAAGC,GAAG,IAAI;QACZT,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC;QAChB,IAAI,CAACC,OAAO,GAAG,4CAA4C;QAC3D,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;MAClC,CAAC;MACDR,KAAK,EAAGS,GAAG,IAAI;QACbZ,OAAO,CAACG,KAAK,CAAC,cAAc,EAAES,GAAG,CAAC;QAClC,IAAI,CAACT,KAAK,GAAG,6CAA6C;MAC5D;KACD,CAAC;EACJ;;AAjDWb,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAuB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT/B5B,8BAAiC;MACzBA,8BAAc;MAAAA,iBAAK;MACvBA,+BAA8B;MAAxBA;QAAA,OAAY6B,cAAU;MAAA,EAAC;MAC3B7B,mEAA+D;MAC/DA,mEAAoE;MAEpEA,8BAAwB;MACGA,6BAAa;MAAAA,iBAAQ;MAC9CA,gCAA8F;MAAtDA;QAAA;MAAA,EAAyB;MAAjEA,iBAA8F;MAGhGA,+BAAwB;MACOA,sCAAqB;MAAAA,iBAAQ;MAC1DA,iCAA0G;MAA9DA;QAAA;MAAA,EAA6B;MAAzEA,iBAA0G;MAG5GA,kCAA8C;MAAAA,+BAAc;MAAAA,iBAAS;;;MAb/DA,eAAW;MAAXA,gCAAW;MACXA,eAAa;MAAbA,kCAAa;MAIuBA,eAAyB;MAAzBA,yCAAyB;MAKrBA,eAA6B;MAA7BA,6CAA6B","names":["i0","ResetpassComponent","constructor","resetpassService","router","route","ngOnInit","queryParams","subscribe","params","token","console","log","onSubmit","error","newPassword","confirmPassword","length","resetPassword","next","res","success","navigate","err","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["D:\\projects\\pi\\connectingMinds\\angular-front-user\\src\\app\\components\\resetpass\\resetpass.component.html","D:\\projects\\pi\\connectingMinds\\angular-front-user\\src\\app\\components\\resetpass\\resetpass.component.ts"],"sourcesContent":["<div class=\"reset-password-form\">\n    <h2>Reset Password</h2>\n    <form (ngSubmit)=\"onSubmit()\">\n      <div *ngIf=\"error\" class=\"alert alert-danger\">{{ error }}</div>\n      <div *ngIf=\"success\" class=\"alert alert-success\">{{ success }}</div>\n  \n      <div class=\"form-group\">\n        <label for=\"newPassword\">New Password:</label>\n        <input type=\"password\" id=\"newPassword\" [(ngModel)]=\"newPassword\" name=\"newPassword\" required>\n      </div>\n  \n      <div class=\"form-group\">\n        <label for=\"confirmPassword\">Confirm New Password:</label>\n        <input type=\"password\" id=\"confirmPassword\" [(ngModel)]=\"confirmPassword\" name=\"confirmPassword\" required>\n      </div>\n  \n      <button type=\"submit\" class=\"btn btn-primary\">Reset Password</button>\n    </form>\n  </div>\n  ","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { ResetpassService } from '../../service/resetpass-svc/resetpass.service';\n\n@Component({\n  selector: 'app-resetpass',\n  templateUrl: './resetpass.component.html',\n  styleUrls: ['./resetpass.component.css']\n})\nexport class ResetpassComponent implements OnInit {  // Implement OnInit\n  token: string = '';\n  newPassword: string = '';\n  confirmPassword: string = '';\n  error: string = '';\n  success: string = '';\n\n  constructor(\n    private resetpassService: ResetpassService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.route.queryParams.subscribe(params => {\n      this.token = params['token'];\n      console.log(\"Retrieved token:\", this.token); // This will help in debugging\n    });\n  }\n\n  onSubmit(): void {\n    this.error = ''; // Reset error message on new submission\n\n    if (!this.token) {\n      this.error = 'Token is missing or invalid.';\n      return;\n    }\n\n    if (this.newPassword !== this.confirmPassword) {\n      this.error = 'Passwords do not match.';\n      return;\n    }\n\n    if (this.newPassword.length < 9) {\n      this.error = 'Password must be at least 8 characters long.';\n      return;\n    }\n\n    this.resetpassService.resetPassword(this.token, this.newPassword).subscribe({\n      next: (res) => {\n        console.log(res);\n        this.success = 'Your password has been reset successfully.';\n        this.router.navigate(['/login']);\n      },\n      error: (err) => {\n        console.error('Reset error:', err);\n        this.error = 'Failed to reset password. Please try again.';\n      }\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}